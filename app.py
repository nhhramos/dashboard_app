import os
from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
import pandas as pd
import google.generativeai as genai
from werkzeug.utils import secure_filename
import io
from dotenv import load_dotenv
import re

# Carregar vari√°veis de ambiente
load_dotenv()

app = Flask(__name__)

@app.route('/')
def index():
    return jsonify({
        "message": "Bem-vindo √† CSV Analizer!",
        "status": "online",
        "endpoints": {
        "health": "/health",
        "chat": "/chat (POST)",
        "upload_csv": "/upload_csv (POST)",
        "dashboard": "/dashboard (POST)"
        },
        "version": "1.0"
    })

# Configurar CORS para permitir requisi√ß√µes do front-end
# app.py
CORS(app, resources={
    r"/*": {
        "origins": [
            "http://localhost:5173",
            "http://localhost:3000",
            "https://*.vercel.app",  # Aceita todos os dom√≠nios do Vercel
            "https://dashboard-app-kofs.onrender.com"  # Ou seu dom√≠nio espec√≠fico
        ],
        "methods": ["GET", "POST", "OPTIONS"],
        "allow_headers": ["Content-Type"]
    }
})
app.config["UPLOAD_FOLDER"] = "./uploads"
app.config["MAX_CONTENT_LENGTH"] = 16 * 1024 * 1024  # 16MB max file size

# Garante que o diret√≥rio de uploads exista
if not os.path.exists(app.config["UPLOAD_FOLDER"]):
    os.makedirs(app.config["UPLOAD_FOLDER"])

# Configura√ß√£o da API Gemini
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not GEMINI_API_KEY:
    print("  Erro: A vari√°vel de ambiente GEMINI_API_KEY n√£o est√° configurada.")
else:
    genai.configure(api_key=GEMINI_API_KEY)
    print(" API Gemini configurada com sucesso")

# Vari√°vel global para armazenar o DataFrame
df_global = None

# Fun√ß√£o para carregar CSV local de exemplo ao iniciar
def load_local_csv():
    global df_global
    local_csv_path = "./exemplo_vendas.csv"
    if os.path.exists(local_csv_path):
        try:
            df_global = pd.read_csv(local_csv_path)
            print(f" CSV local carregado: {local_csv_path}")
        except Exception as e:
            print(f" Erro ao carregar CSV local: {str(e)}")

load_local_csv()

# Fun√ß√£o para identificar tipos de an√°lises dispon√≠veis baseado na pergunta e nos dados
def generate_dashboard(user_message, df):
    """
    Gera um dashboard de an√°lises dispon√≠veis baseado na pergunta do usu√°rio
    e nas caracter√≠sticas dos dados dispon√≠veis.
    """
    if df is None:
        return {
            "available": False,
            "message": "Nenhum CSV carregado. Por favor, carregue um arquivo primeiro."
        }
    
    # An√°lise das colunas
    numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
    categorical_cols = df.select_dtypes(include=['object']).columns.tolist()
    date_cols = []
    
    # Tentar identificar colunas de data
    for col in df.columns:
        if 'data' in col.lower() or 'date' in col.lower():
            date_cols.append(col)
    
    # Palavras-chave na pergunta
    message_lower = user_message.lower()
    
    # Definir an√°lises dispon√≠veis
    analyses = []
    
    # 1. An√°lise Descritiva (sempre dispon√≠vel se houver dados num√©ricos)
    if numeric_cols:
        analyses.append({
            "id": "descriptive",
            "name": "üìä An√°lise Descritiva",
            "description": "Estat√≠sticas b√°sicas: m√©dia, mediana, min, max, desvio padr√£o",
            "relevant": any(word in message_lower for word in ['m√©dia', 'resumo', 'estat√≠stica', 'geral', 'descritiva']),
            "columns": numeric_cols
        })
    
    # 2. An√°lise de Tend√™ncias (se houver coluna de data)
    if date_cols or any('mes' in col.lower() or 'ano' in col.lower() for col in df.columns):
        analyses.append({
            "id": "trends",
            "name": "üìà An√°lise de Tend√™ncias",
            "description": "Padr√µes ao longo do tempo, crescimento, sazonalidade",
            "relevant": any(word in message_lower for word in ['tend√™ncia', 'tempo', 'crescimento', 'evolu√ß√£o', 'hist√≥rico']),
            "columns": date_cols if date_cols else [col for col in df.columns if 'mes' in col.lower() or 'ano' in col.lower()]
        })
    
    # 3. Compara√ß√£o entre Categorias
    if categorical_cols:
        analyses.append({
            "id": "comparison",
            "name": "‚öñÔ∏è An√°lise Comparativa",
            "description": f"Compare {', '.join(categorical_cols[:3])}",
            "relevant": any(word in message_lower for word in ['comparar', 'diferen√ßa', 'versus', 'entre', 'melhor', 'pior']),
            "columns": categorical_cols
        })
    
    # 4. Top/Ranking
    if categorical_cols and numeric_cols:
        analyses.append({
            "id": "ranking",
            "name": "üèÜ Rankings e Top N",
            "description": "Identificar maiores, menores, melhores performances",
            "relevant": any(word in message_lower for word in ['maior', 'menor', 'top', 'ranking', 'melhor', 'pior', 'mais', 'menos']),
            "columns": categorical_cols + numeric_cols
        })
    
    # 5. Detec√ß√£o de Anomalias
    if numeric_cols:
        analyses.append({
            "id": "anomalies",
            "name": "üîç Detec√ß√£o de Anomalias",
            "description": "Identificar valores incomuns ou outliers",
            "relevant": any(word in message_lower for word in ['anomalia', 'outlier', 'incomum', 'estranho', 'problema']),
            "columns": numeric_cols
        })
    
    # 6. Correla√ß√µes
    if len(numeric_cols) >= 2:
        analyses.append({
            "id": "correlation",
            "name": "üîó An√°lise de Correla√ß√µes",
            "description": "Rela√ß√µes entre diferentes vari√°veis num√©ricas",
            "relevant": any(word in message_lower for word in ['correla√ß√£o', 'rela√ß√£o', 'influ√™ncia', 'impacto', 'afeta']),
            "columns": numeric_cols
        })
    
    # 7. Distribui√ß√£o
    if numeric_cols or categorical_cols:
        analyses.append({
            "id": "distribution",
            "name": "üìâ An√°lise de Distribui√ß√£o",
            "description": "Como os dados est√£o distribu√≠dos, frequ√™ncias",
            "relevant": any(word in message_lower for word in ['distribui√ß√£o', 'frequ√™ncia', 'como est√°', 'quantos']),
            "columns": numeric_cols + categorical_cols
        })
    
    # 8. Agrega√ß√µes e Totais
    if numeric_cols:
        analyses.append({
            "id": "aggregation",
            "name": "‚ûï Totais e Agrega√ß√µes",
            "description": "Somas, contagens, agrupamentos",
            "relevant": any(word in message_lower for word in ['total', 'soma', 'quantos', 'contar', 'agrupar']),
            "columns": numeric_cols + categorical_cols
        })
    
    # Ordenar por relev√¢ncia
    analyses_sorted = sorted(analyses, key=lambda x: x['relevant'], reverse=True)
    
    return {
        "available": True,
        "total_analyses": len(analyses),
        "analyses": analyses_sorted,
        "data_info": {
            "rows": len(df),
            "columns": len(df.columns),
            "numeric_columns": len(numeric_cols),
            "categorical_columns": len(categorical_cols),
            "has_dates": len(date_cols) > 0
        }
    }

# Rota de health check
@app.route("/health", methods=["GET"])
def health():
    return jsonify({
        "status": "ok",
        "gemini_configured": bool(GEMINI_API_KEY),
        "csv_loaded": df_global is not None
    }), 200

# Nova rota para obter o dashboard
@app.route("/dashboard", methods=["POST"])
def get_dashboard():
    """
    Retorna um dashboard de an√°lises dispon√≠veis baseado na pergunta do usu√°rio
    """
    user_message = request.json.get("message", "")
    
    dashboard = generate_dashboard(user_message, df_global)
    
    return jsonify(dashboard), 200

# Upload de arquivo CSV
@app.route("/upload_csv", methods=["POST"])
def upload_csv():
    global df_global
    
    if "csv_file" not in request.files:
        return jsonify({"message": "Nenhum arquivo enviado"}), 400

    file = request.files["csv_file"]
    
    if file.filename == "":
        return jsonify({"message": "Nenhum arquivo selecionado"}), 400

    if file and file.filename.endswith(".csv"):
        try:
            # Ler o CSV diretamente do stream
            df_global = pd.read_csv(io.StringIO(file.stream.read().decode("utf-8")))
            
            return jsonify({
                "message": " Arquivo CSV carregado e pronto para an√°lise!",
                "columns": df_global.columns.tolist(),
                "rows": len(df_global),
                "preview": df_global.head(5).to_dict(orient="records")
            }), 200
            
        except Exception as e:
            return jsonify({
                "message": f"Erro ao processar o arquivo CSV: {str(e)}"
            }), 500

    return jsonify({
        "message": "Formato de arquivo inv√°lido. Por favor, envie um arquivo CSV."
    }), 400

# Rota do chat
@app.route("/chat", methods=["POST"])
def chat():
    user_message = request.json.get("message")

    if not user_message:
        return jsonify({"reply": "Por favor, digite uma mensagem."}), 400

    if not GEMINI_API_KEY:
        return jsonify({
            "reply": "Erro: a chave da API do Gemini n√£o foi configurada."
        }), 500

    # Gerar dashboard de an√°lises dispon√≠veis
    dashboard = generate_dashboard(user_message, df_global)

    # Montar contexto inteligente
    context = ""
    if df_global is not None:
        try:
            resumo_dados = df_global.describe(include="all").to_markdown()
        except Exception:
            resumo_dados = "N√£o foi poss√≠vel gerar resumo estat√≠stico."

        # Para evitar overload, envia at√© 100 linhas de exemplo
        amostra = df_global.head(100).to_markdown(index=False)

        # Adicionar informa√ß√µes do dashboard ao contexto
        dashboard_info = ""
        if dashboard["available"]:
            relevant_analyses = [a for a in dashboard["analyses"] if a["relevant"]]
            if relevant_analyses:
                dashboard_info = "\n\nüéØ AN√ÅLISES MAIS RELEVANTES PARA ESTA PERGUNTA:\n"
                for analysis in relevant_analyses[:3]:  # Top 3 mais relevantes
                    dashboard_info += f"- {analysis['name']}: {analysis['description']}\n"

        context = (
            f"Voc√™ tem acesso aos seguintes dados de um arquivo CSV:\n"
            f"Colunas: {df_global.columns.tolist()}\n"
            f"Total de linhas: {len(df_global)}\n\n"
            f"Resumo geral dos dados (num√©ricos e categ√≥ricos):\n{resumo_dados}\n\n"
            f"Amostra de 100 linhas do dataset:\n{amostra}\n"
            f"{dashboard_info}\n"
        )
    else:
        context = "Nenhum arquivo CSV foi carregado ainda. Por favor, carregue um arquivo CSV para an√°lise.\n"

    # Prompt base do sistema - ATUALIZADO COM NOVA FUN√á√ÉO DE DASHBOARD
    prompt_system = (
        "Voc√™ √© um bot especialista em an√°lise de dados com uma NOVA FUNCIONALIDADE:\n\n"
        
        "üéØ MODO DE OPERA√á√ÉO:\n"
        "1. PRIMEIRO: Sempre apresente um mini-dashboard das an√°lises mais relevantes que voc√™ pode fazer\n"
        "2. DEPOIS: Execute a an√°lise principal solicitada\n"
        "3. FINALMENTE: Ofere√ßa fazer an√°lises complementares\n\n"
        
        "üìä TIPOS DE AN√ÅLISES QUE VOC√ä DOMINA:\n"
        "- An√°lise Descritiva: estat√≠sticas b√°sicas e resumos\n"
        "- An√°lise de Tend√™ncias: padr√µes temporais e evolu√ß√£o\n"
        "- An√°lise Comparativa: diferen√ßas entre categorias\n"
        "- Rankings: identificar top performers\n"
        "- Detec√ß√£o de Anomalias: valores incomuns\n"
        "- Correla√ß√µes: rela√ß√µes entre vari√°veis\n"
        "- Distribui√ß√µes: como os dados est√£o espalhados\n"
        "- Agrega√ß√µes: totais e agrupamentos\n\n"
        
        "üí° FORMATO DE RESPOSTA IDEAL:\n"
        "```\n"
        "üéØ AN√ÅLISES DISPON√çVEIS PARA SUA PERGUNTA:\n"
        "[Liste 2-3 an√°lises mais relevantes]\n\n"
        "üìä AN√ÅLISE PRINCIPAL:\n"
        "[Responda a pergunta do usu√°rio com dados concretos]\n\n"
        "üí° PR√ìXIMOS PASSOS:\n"
        "[Sugira 1-2 an√°lises complementares]\n"
        "```\n\n"
        
        "IMPORTANTE: Use o contexto fornecido para responder √†s perguntas, "
        "oferecendo insights, tend√™ncias e conclus√µes poss√≠veis. "
        "Evite repetir o conte√∫do do CSV; em vez disso, explique e interprete os dados.\n\n"
        f"{context}"
    )

    try:
        model = genai.GenerativeModel("gemini-2.5-flash")
        chat_session = model.start_chat(history=[])
        response = chat_session.send_message(prompt_system + "\nUsu√°rio: " + user_message)

        bot_reply = response.text
        
        # Retornar resposta com dashboard inclu√≠do
        return jsonify({
            "reply": bot_reply,
            "dashboard": dashboard  # Incluir dashboard na resposta
        })
        
    except Exception as e:
        print(f"‚ùå Erro na API Gemini: {str(e)}")
        return jsonify({
            "reply": f" Erro ao se comunicar com a IA: {str(e)}"
        }), 500

if __name__ == "__main__":
    print(" Servidor Flask iniciando...")
    print(" Certifique-se de que o arquivo .env est√° configurado com GEMINI_API_KEY")
    app.run(debug=True, port=5000, host="0.0.0.0")